// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)

  accounts   Account[]
  sessions   Session[]
  collection Collection[]
  Posts      Post[]
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationCode {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  code    Int      @unique
  expires DateTime

  @@unique([email, code])
}

model PasswordResetCode {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  code    Int      @unique
  expires DateTime

  @@unique([email, code])
}

model Collection {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String

  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Manufacturer {
  id       String  @id @default(uuid()) @map("_id")
  name     String
  imageUrl String?

  infrastructure Infrastructure[]
}

model Infrastructure {
  id       String  @id @default(uuid()) @map("_id")
  name     String
  imageUrl String?

  Manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?

  series Series[]
}

model Series {
  id   String @id @default(uuid()) @map("_id")
  name String

  products Product[]

  Infrastructure   Infrastructure? @relation(fields: [infrastructureId], references: [id])
  infrastructureId String?
}

model Product {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  description String?

  seriesId String?
  series   Series? @relation(fields: [seriesId], references: [id])

  pdfs  Pdf[]
  Posts Post[]
  Image ProductImage[]
}

model ProductImage {
  id        String  @id @default(uuid()) @map("_id")
  url       String // 图片的 URL
  isPrimary Boolean @default(false) // 标记是否为主图

  productId String? // 关联的产品 ID
  product   Product? @relation(fields: [productId], references: [id])
}

model Pdf {
  id  String @id @default(uuid()) @map("_id")
  url String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Post {
  id        String  @id @default(uuid()) @map("_id")
  title     String
  content   String
  published Boolean @default(true)

  comments Json
  views    Int  @default(0)
  likes    Int  @default(0)

  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}
